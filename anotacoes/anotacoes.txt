AULA 2.7

NomeDaClasseController -> Classe responsavel por receber requisicoes web.
@ResponseBody -> Anotacao que indica que o retorno do endpoint seja no corpo da requisicao.

AULA 2.9

Injetando um notificar na instanciacao de AtivacaoClienteService, isso
eh uma injecao de dependencias de forma manual.
=======================================================================
Injecao de dependencias eh uma forma de inversao de controle onde se eh
injetado uma determinada dependencia em uma classe.
=======================================================================
Injecao de dependencias possui baixo aclopamento

exemplo: Notificador notificadorEmail = new NotificadorEmail();

AULA 2.11

@SpringBootApplication -> essa anotacao eh responsavel para que o Spring IoC Container
mapeie as classes do projeto e encontre as outras anotacoes e realize uma instancia.

@Component -> essa anotacao eh para o spring gerencie essa classe,
ou seja, o container do spring encontre a classe no projeto realize
a instancia, configuracao e a injecao de objetos dessa classe em
outros beans.

O construtor da classe eh chamado mesmo sem ter sido instanciado
em nenhuma outra classe, por que na inicializacao da aplicacao (bootstrap)
o Spring IoC Container mapeia todas as classes do projeto encontrou um componente
atraves da anotacao e realizou uma instancia da classe.

public NotificadorEmail() {
    System.out.println("Construtor chamado!");
}

AULA 2.12

Injecao de Dependencias atraves do construtor
por que o objeto NotificadorEmail eh um componente spring

exemplo: 
public NomeDaClasse(NomeDaClasse variavel) {
	this.atributo = variavel;
}

AULA 2.13

@Configuration -> anotacao que define uma classe de configuracoes
@Bean -> anotacao que indica que esse metodo realiza a instancia, configuracao e inicializa
um novo objeto que sera gerenciado pelo container spring.
Dentro do Spring IoC Container, por padrao o bean sera nomeado como "notificadorEmail",
que eh exatamente o nome do metodo de definicao do bean. 

AULA 2.14

@Autowired -> anotacao para injecao de dependencias

Pontos de Injecao

>> Ponto de injecao pode ser pelo atributo
@Autowired
private NomeDaClasse nomeDaClasse;


>> Ponto de injecao eh aonde se pode injetar os objetos
>> dentro dos beans, por exemplo o construtor eh um ponto
>> de injecao.
@Autowired
public NomeDaClasse (nomeDaClasse variavel){
      this.atributo = variavel
}

public NomeDaClasse(String qualquer) {    }

>> ponto de injecao pode ser o metodo setter
@Autowired
public void setNomeDoAtributo(NomeDaClasse variavel) {
       this.atributo = variavel;
}

AULA 2.15

@Autowired(required = false) -> anotacao que permite a dependencia 
deixa de ser obrigatoria na classe e se torna opcional. 

AULA 2.16

@Autowired
private List<NomeDaInterface> lista -> pelo fato do spring nao saber qual das
classes a interface sera chamado essa ambiguidade eh solucionada com uma lista.

AULA 2.17 

@Primary -> informa que essa classe tem prioridade
na injecao da interface em relacao as outras classes
que possui a mesma interface.

AULA 2.18

@Qualifier -> qualifica a classe/componente e eh colocado
um identificador para diferenciar quando a interface for
injetada.

AULA 2.19

@Retention -> informa quanto tempo essa anotacao TipoDoNotificador
deve permanecer aonde ela foi usada, lido em tempo de execucao.

AULA 2.20

@Profile -> Spring Profiles eh uma forma de separar componentes da
aplicacao que serao disponibilizados em certos ambientes.

AULA 2.21 

Todos os beans do spring tem um ciclo de vida, ou seja,
as fases desde a existencia desse bean(o surgimento da
instancia desse bean) ate aonde o bean deixa de existir
no container.
O ciclo de vida do bean tem tres fases:
- Fase de inicializacao do bean
- Fase de utilizacao do bean
- Fase de encerramento do bean
Com isso pode-se implementar metodos de callback desse
ciclo de vida. Sao metodos declarados que sao chamados
pelo proprio container quando passa por alguma fase do
ciclo de vida.

AULA 2.22

Observer -> design pattern que deixa o acoplamento
mais baixo entre as classes. O spring implementa o observer
dentro do framework e eh chamado de event handler

ApplicationEventPublisher -> Interface responsavel por implementar
a publicacao de um evento.

publishEvent(new ClienteAtivadoEvent(cliente)) -> dizer para o container 
que o cliente esta ativo neste momento disparando um evento informando que 
o cliente foi ativado.

AULA 2.26

@ConfigurationProperties("property") -> anotacao que informa que esta classe 
representa um arquivo de propriedades.

AULA 3.6

IDENTITY -> informa que o responsavel pela geracao automatica do valor do ID
eh o provedor de persistencia, ou seja, no caso o banco de dados (MySQL).

AULA 3.8

EntityManager -> interface que gerencia
o contexto de persistencia entre os codigos java
e o sql.

AULA 3.9

@Transactional -> anotacao que informa quando o 
metodo for executado sera dentro de uma transacao.

AULA 3.14 

Repository -> padrao do DDD que adiciona uma camada
de abstracao de acesso a dados.

AULA 3.17

Lombok -> biblioteca java com foco em produtividade
e reducao de codigo boilerplate usando anotacoes proprias.
Codigo boilerplate sao codigos padroes java repetidos.

AULA 4.10

Controller -> classe responsavel por receber requisicoes
web, tratar essas requisicoes e devolver uma resposta.

AULA 4.27

domain service eh uma operacao sem estado
que realiza uma tarefa especifica do dominio,
ou seja, uma tarefa de negocio.
Quando um processo no dominio nao eh responsabilidade
natural de uma entidade eh criado um service de dominio.

AULA 4.34

Reflections -> capacidade de inspecionar objetos
java em tempo de execucao ate a alteracao desses objetos
de forma dinamica.

AULA 5.16

specification encapsula uma restricao e pode ser combinado com outras specifications
se formando em uma combinacao de restricoes. Sendo criada em uma classe para obter os
filtros das restricoes.

AULA 5.20

@NoRepositoryBean -> nao deve ser levada em conta para fim de instanciacao de um repositorio 
pelo spring data jpa ou seja o spring data jpa nao deve instancia uma implementacao para essa 
interface.


AULA 6.4

Embeddable -> Objetos incorporaveis/imbutidos sao componentes de uma entidade cujas 
as propriedades sao mapeadas para a tabela da entidade.

@Embeddable -> anotacao que informa que eh uma classe incorporavel, ou seja, ela tem a
capacidade de ser incorporada em uma entidade, ou seja, eh a parte de uma entidade e nao 
uma entidade em si. E todas as propriedades dessa classe sao refletidas na tabela na entidade
que incorpora essa classe.

@Embedded -> anotacao que informa que a propridade dentro da entidade Ã© de um tipo incorporado.

AULA 6.6 

@CreationTimestamp -> anotacao que atribui/informa que a propriedade anotada deve ser atribuida como uma
data hora atual no momento em que a entidade for salva pela primeira vez. 

@UpdateTimestamp -> anotacao que informa que a data hora atual deve ser atribuida a propriedade anotada sempre
que a entidade for atualizada.

AULA 6.10

Eager Loading -> Load(carregamento) aonde todas as classes relacionadas sao carregadas na mesma query. O ORM, 
normalmente por meio de Joins, trara todas as entidades relacionadas. Em certos casos o Eager loading torna-se 
desnecessario, pois nem sempre quando se carrega uma entidade voce deseja ter carregado em memoria as entidades
relacionadas. Todas as associacoes @*ToOne utilizam o Eager Loading.

AULA 6.11

Lazy Loading -> carregamento preguicoso, quando voce executa uma consulta por uma certa entidade suas relacoes nao
sao carregadas em memoria pela consulta inicial, no entanto, ao executar algum metodo que chama esses registros, sera 
executada uma outra consulta para preencher essas entidades relacionadas. Todas as associacoes @*ToMany utilizam o Lazy 
Loading.

AULA 6.12

A propria implementacao do JPA cria uma classe dinamicamente em tempo de execucao, a classe eh instanciada e atribuida a
classe chamada, quando for lazy loading.

AULA 7.1

Aplicacao sem pool de conexoes

Requisicao 1 -> Aplicacao Web -> Banco de Dados

Sempre que uma requisicao bater no servidor da aplicacao eh realizado uma conexao com o banco de dados.
O pool de conexoes eh um componente de software que mantem um conjunto de conexoes com o banco de dados
para a reutilizacao em uma aplicacao. Redizindo o tempo gasto na abertura e fechamento das conexoes.
Quando as conexoes nao estao sendo utilizadas elas ficam no estado idle (ociosas) esperando uma conexao.
Existe uma quantidade minima e maxima de conexoes que podem ser criadas. 

AULA 7.2

AB (ApacheBench) -> ferramenta para teste de desempenho de aplicacoes web.

linhas de comando
ab -n 6 -c 2  127.0.0.1:8080/restaurantes  ->  6 requisicoes com 2 requisicoes concorrentes: 2 2 2
ab -n 2000 -c 2  127.0.0.1:8080/restaurantes  ->  2000 requisicoes com 2 requisicoes concorrentes
ab -n 2000 -c 50  127.0.0.1:8080/restaurantes ->  2000 requisicoes com 50 requisicoes concorrentes

AULA 7.3

ab -n 2000 -c 50 127.0.0.1:8080/restaurantes -> 2000 requisicoes com 50 requisicoes concorrentes

AULA 7.8

select distinct nome_da_coluna from nome_da_tabela -> retorna valores distintos, ou seja, valores unicos 
nao repetidos.

AULA 7.11

./mvnw flyway:repair -> flyway repara os erros de sql
./mvnw flyway:repair -Dflyway.configFiles=src/main/resources/flyway.properties -> flyway repara os erros de sql com
as configuracoes do properties.

AULA 8.14 

@ControllerAdvice -> anotacao informa que dentro deste componente spring pode-se adicionar
as exception handlers em que todos os controllers do projeto possui serao tratadas por aqui.

@ExceptionHandler -> anotacao que informa a classe e excecao que tera o tratamento e o retorno,
eh criado um metodo responsavel por tratar e capturar exceptions dos controllers.

AULA 8.15

ResponseEntityExceptionHandler -> classe de conveniencia para classes de exception handler 
globais que tem um implementacao padrao para as exceptions que sao internas do spring mvc.

AULA 8.21

commons lang -> projeto apache, uma biblioteca que oferece varios metodos utilitarios para 
trabalhar de uma maneira simplificada com strings, numeros, exceptions e etc.

AULA 9.15

@Target -> responsavel por informar aonde que a anotacao especifica pode ser utilizada. ex: metodo, campo/atributo e etc.
@Retention -> informa que a anotacao especifica pode ser lida em tempo de execucao.
@Repeatable -> informa que a anotacao especifica pode ser repetida, ou seja, a mesma propriedade pode utilizar mais de uma
vez a anotacao especifica.
@Documented -> informa que a anotacao especifica eh documentada (javadoc).
@Constraint -> informa a constraint e qual a classe que implementa a anotacao especifica.

@OverridesAttribute -> substituicao de atributo de uma anotacao por outra.

message() -> propriedade da anotacao especifica que informa qual a mensagem que sera atribuida caso essa
validacao nao seja satisfeita.
groups() -> propriedade da anotacao especifica que informa os grupos de validacao, ou seja, possibilita quem vai
utilizar essa anotacao.
payload() -> propriedade da anotacao especifica quen passa os metadados de validacao.


AULA 10.2

JUnit -> biblioteca simples para escrever e executar codigos de testes unitarios. 

AULA 10.6

.\mvnw test
.\mvnw clean package


AULA 10.7

maven failsafe plugin -> plugin do maven para rodar testes de integracao, com esse plugin
o build do projeto usando maven nao vai executar os testes de integracao, por isso nao vai
falhae o build caso aconteca algum problema.

AULA 10.8

.\mvnw verify -> comando que executa os testes de integracao.

AULA 11.1

@Transactional -> adicionando a anotacao de transacao de dados com o banco de dados,
caso tenha mais de uma operacao/transacao com o banco de dados e
ocorra uma exception entre as transacoes pode acontecer um estado
de inconsistencia no banco de dados.

AULA 11.3

Quando nao poder adicionar/ou nao querer anotacoes do jackson cria uma classe de mixin.
o que sao classes mixin?
Classe que possui membros/propriedades de outra classe original, onde a configuracao/anotacoes
do jackson ficam na classe mixin e nao na classe original.

AULA 11.5

TimeZone -> fuso horario

O que eh fuso horario?
regiao do globo terrestre que define qual eh o horario que deve ser usado
pela populacao.

Offset -> diferenca de horario.

UTC -> padrao de horario universal, para fuso horario mundial.

AULA 11.6

Boas praÌticas para trabalhar com data e hora em REST APIs.

1) Use ISO-8601 para
   formatar data/hora

2) Aceite qualquer fuso horario

3) Armazene em UTC

4) Retorne em UTC

5) Nao inclua o horario, se nao
for necessario.

AULA 11.17

ModelMapper -> biblioteca com o objetivo de fazer o mapeamento de objetos, e a transformacao de um
modelo para o outro.

AULA 12.10

O objeto usuario eh salvo porque quando busca o objeto usuario ele fica no contexto de persistencia do JPA, o
JPA tem uma area de memoria (contexto de persistencia) onde os objetos persistidos vao sendo gerenciados pelo
JPA e sincronizados com o banco de dados atraves do transactional.

@Transactional
public Usuario salvar(Usuario usuario) {
    return usuario;
}

AULA 18.12

// swagger URL : http://127.0.0.1:8080/swagger-ui/index.html


